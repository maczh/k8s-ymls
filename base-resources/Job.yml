#Kubernetes的Job是一种控制器，用于管理一次性任务的运行。它可以确保在Kubernetes集群中的一个或多个Pod中运行一个或多个容器，直到它们成功完成为止。Job通常用于批处理作业，例如数据处理、ETL作业、备份和恢复等。
# 使用Job的场景包括：
# 执行一次性的任务，例如数据导入或导出
# 执行周期性的任务，例如定期备份
# 执行需要在一个或多个Pod中并行运行的任务
apiVersion: batch/v1                          #版本号
kind: Job                                     #资源类型
metadata:                                     #元数据
  name: mysql-export-job                      #任务名称
  namespace: opencloud                        #命名空间
  labels:                                     #自定义标签
    app: mysql
spec:
  template:                           #Pod模板定义
    metadata:                         #模板元数据
      labels:                         #模板自定义标签
        app: opencloud-ecs-core
    spec:                                                       #Pod模板规格
      # initContainers:                                           #属于Pod的init容器列表
      # ephemeralContainers:                                      #在此Pod中运行的临时容器列表
      # imagePullSecrets:                                         #私有镜像仓库拉取的Secret
      # - name: docker-registry-secret
      containers:                                                 #Pod中的容器清单
        - name: opencloud-ecs-core                                  #容器名称
          imagePullPolicy: IfNotPresent                             #镜像拉取策略。"Always"、"Never"、"IfNotPresent" 之一。如果指定了 :latest 标签，则默认为 "Always"， 否则默认为 "IfNotPresent"。无法更新
          image: dev.gamecdn.com:5000/mysql-xbackup:v0.0.1     #镜像名称、仓库、版本
          # command: ["opencloud-ecs-core","-f", "opencloud-ecs-core.yml"]  #执行容器内的命令，如果未提供，则使用容器镜像的ENDPOINT.变量引用 $(VAR_NAME) 使用容器的环境进行扩展
          # args: []                                                  #endpoint执行参数，如果未提供，则使用容器镜像的 CMD 设置
          # workingDir: /apps                                         #容器的工作目录。如果未指定，将使用容器运行时的默认值，默认值可能在容器镜像中配置
#          ports:                                                    #容器端口映射清单
#            - containerPort: 8555                                   #要在 Pod 的 IP 地址上公开的端口号
              # hostIP:                                               #绑定外部端口的主机 IP
              # hostPort:                                             #要在主机上公开的端口号
              # name:                                                 #如果设置此字段，这必须是 IANA_SVC_NAME 并且在 Pod 中唯一。 Pod 中的每个命名端口都必须具有唯一的名称。服务可以引用的端口的名称。
#              protocol: TCP                                         #端口协议。必须是 UDP、TCP 或 SCTP。默认为 TCP。
          # env:                                                      #环境参数定义
          # - name: ENV_VAR1_NAME                                     #环境变量名
          #   value: test_value                                       #环境变量值
          # - name: ENV_VAR2_NAME
          #   valueFrom:                                              #从ConfigMap或元数据labels获取值
          #     configMapKeyRef:                                      #从ConfigMap引用
          #       name: test_cm                                       #被引用的comfigMap的名称
          #       key: ssl                                            #configMap中的key
          # - name: ENV_VAR3_NAME
          #   valueFrom:
          #     fieldRef: metadata.labels['app']                      #选择 Pod 的一个字段：支持 metadata.name、metadata.namespace、metadata.labels['<KEY>']、 metadata.annotations['<KEY>']、spec.nodeName、spec.serviceAccountName、status.hostIP status.podIP、status.podIPs
          #     resourceFieldRef: limit.cpu                           #选择容器的资源：目前仅支持资源限制和请求（limits.cpu、limits.memory、limits.ephemeral-storage、 requests.cpu、requests.memory 和 requests.ephemeral-storage）
          #     secretKeyRef:                                         #在 Pod 的名字空间中选择 Secret 的主键
          #       name: test-secret                                   #被引用的secret名称
          #       key: test-key                                       #要选择的Secret的key
          # envFrom:                                                  #用来在容器中填充环境变量的数据源列表
          # - configMapRef:                                           #从configMap导入
          #   name: env-configmap                                     #要导入的环境变量ConfigMap名称
          # prefix: MYSQL_                                            #导入key的前缀
          # secretRef:                                                #从指定的secret导入
          #   name: env-secret                                        #要导入的secret名称
          volumeMounts:                                               #要挂载到容器文件系统中的 Pod 卷
            - name: logs                                                #挂载点名称，必须与volumes中名称匹配
              mountPath: /opt/logs                                      #挂载到容器内的路径
              # readOnly: false                                           #是否只读模式，默认为false，即为读写模式
            - name: cfg                                                 #挂载ConfigMap中一个文件
              mountPath: /etc/mysql.cnf                                 #挂载成文件
              subPath: etc/mysql.cnf                                    #必须与volumns中cm配置的path相同，用于约束权挂载此文件，不影响被挂载的目录中其他文件
          # volumeDevices:                                              #是容器要使用的块设备列表
          # - name: "pvc-1"                                             #name 必须与 Pod 中的 persistentVolumeClaim 的名称匹配
          #   devicePath: /data                                         #设备将被映射到的容器内的路径
          # resources:                                                  #资源限额配置
          #   requests:                                                 #最小需求
          #     cpu:  100m                                              #CPU资源，10%core
          #     memory: 256Mi                                           #最小内存需求
          #   limits:                                                   #最大限额
          #     cpu: 500m                                               #cpu最大允许使用0.5core
          #     memory: 1Gi                                             #内存最大允许1G
      #   lifecycle:                                                  #管理系统应对容器生命周期事件采取的行动
      #     postStart:                                                #创建容器后立即调用 postStart。如果处理程序失败，则容器将根据其重新启动策略终止并重新启动。 容器的其他管理阻塞直到钩子完成
      #       exec:                                                   #在容器内执行的命令行
      #         command: []                                           #要在容器内执行的命令行，命令的工作目录是容器文件系统中的根目录（'/'）。 该命令只是被通过 exec 执行，而不会单独启动一个 Shell 来运行，因此传统的 Shell 指令（'|' 等）将不起作用。要使用某 Shell，你需要显式调用该 Shell。 退出状态 0 被视为活动/健康，非零表示不健康
      #       httpGet:                                                #执行http接口调用
      #         port: 8555                                            #容器内http端口号
      #         host:                                                 #http的host主机名
      #         httpHeaders:                                          #自定义http头列表
      #         - name: Request-Id                                    #自定义http头的key
      #           value: 2873wbjkebfd2i                               #自定义http头的值
      #         path: /init                                           #URI路径
      #         scheme: HTTP                                          #http或https
      #     preStop:                                                  #在容器因 API 请求或管理事件（如存活态探针/启动探针失败、抢占、资源争用等）而终止之前立即调用。 如果容器崩溃或退出，则不会调用处理程序
      #       exec:                                                   #在容器内执行的命令行
      #         command: []                                           #要在容器内执行的命令行，命令的工作目录是容器文件系统中的根目录（'/'）。 该命令只是被通过 exec 执行，而不会单独启动一个 Shell 来运行，因此传统的 Shell 指令（'|' 等）将不起作用。要使用某 Shell，你需要显式调用该 Shell。 退出状态 0 被视为活动/健康，非零表示不健康
      #       httpGet:                                                #执行http接口调用
      #         port: 8555                                            #容器内http端口号
      #         host:                                                 #http的host主机名
      #         httpHeaders:                                          #自定义http头列表
      #         - name: Request-Id                                    #自定义http头的key
      #           value: 2873wbjkebfd2i                               #自定义http头的值
      #         path: /close                                           #URI路径
      #         scheme: HTTP                                          #http或https
      #     livenessProbe:                                            #定期探针容器活跃度。如果探针失败，容器将重新启动
      #       exec:                                                   #在容器内执行的命令行
      #         command: []                                           #要在容器内执行的命令行，命令的工作目录是容器文件系统中的根目录（'/'）。 该命令只是被通过 exec 执行，而不会单独启动一个 Shell 来运行，因此传统的 Shell 指令（'|' 等）将不起作用。要使用某 Shell，你需要显式调用该 Shell。 退出状态 0 被视为活动/健康，非零表示不健康
      #       httpGet:                                                #执行http接口调用
      #         port: 8555                                            #容器内http端口号
      #         host:                                                 #http的host主机名
      #         httpHeaders:                                          #自定义http头列表
      #         - name: Request-Id                                    #自定义http头的key
      #           value: 2873wbjkebfd2i                               #自定义http头的值
      #         path: /init                                           #URI路径
      #         scheme: HTTP                                          #http或https
      #       initialDelaySeconds: 10                                 #初始化延时秒数
      #       periodSeconds: 5                                        #探针时间间隔
      #       timeoutSeconds: 1                                       #超时时间
      #       failureThreshold: 2                                     #失败次数，1-3次
      #       successThreshold: 1                                     #最少成功次数
      #     readinessProbe:                                           #定期探测容器服务就绪情况。如果探针失败，容器将被从服务端点中删除
      #     # 同livenessProbe
      #     startupProbe:                                             #startupProbe 表示 Pod 已成功初始化。如果设置了此字段，则此探针成功完成之前不会执行其他探针
      #     # 同livenessProbe
      volumes:                                                        #卷来源描述
        - name: logs                                                    #卷名称
          hostPath:                                                     #节点本地主机路径
            path: /opt/k8s/shared/opencloud/logs                        #节点本地路径
        - name: data
          persistentVolumeClaim:                                        #挂载PVC卷到容器
            claimName: nfs-pvc                                          #pvc名称
            readOnly: false                                             #是否只读
        - name: cfg
          configMap:                                                    #预定义的configMap
            name: cfg-vol-cm                                            #configMap名称
            items:                                                      #允许投射的文件名key
              - key: mysql.cnf                                          #键
                path: etc/                                              #将键映射到的文件的相对路径。不能是绝对路径。不能包含路径元素 “..”。不能以字符串 “..” 开头
        - name: sec
          secret:                                                       #使用secret映射卷
            secretName: vol-secret                                      #要使用的、位于 Pod 的名字空间中的 Secret 名称
            items:                                                      #允许投射的文件名key
              - key: mysql.cnf                                          #键
                path: etc/                                              #将键映射到的文件的相对路径。不能是绝对路径。不能包含路径元素 “..”。不能以字符串 “..” 开头
  backoffLimit: 4                   #指定标记此任务失败之前的重试次数。默认值为 6
  parallelism: 5                    #指定任务应在任何给定时刻预期运行的 Pod 个数上限。 当(.spec.completions - .status.successful) < .spec.parallelism 时， 即当剩余的工作小于最大并行度时，在稳定状态下运行的 Pod 的实际数量将小于此数量
  completions: 1                    #指定任务应该运行并预期成功完成的 Pod 个数。设置为空意味着任何 Pod 的成功都标识着所有 Pod 的成功， 并允许 parallelism 设置为任何正值。设置为 1 意味着并行性被限制为 1，并且该 Pod 的成功标志着任务的成功。
  completionMode: NonIndexed        #指定如何跟踪 Pod 完成情况。它可以是 NonIndexed（默认）或者 Indexed。
  activeDeadlineSeconds: 60         #系统尝试终止任务之前任务可以持续活跃的持续时间（秒），时间长度是相对于 startTime 的； 字段值必须为正整数。如果任务被挂起（在创建期间或因更新而挂起）， 则当任务再次恢复时，此计时器会被停止并重置
  ttlSecondsAfterFinished: 120      #ttlSecondsAfterFinished 限制已完成执行（完成或失败）的任务的生命周期。如果设置了这个字段， 在 Job 完成 ttlSecondsAfterFinished 秒之后，就可以被自动删除。 当 Job 被删除时，它的生命周期保证（例如终结器）会被考察。 如果未设置此字段，则任务不会被自动删除。如果此字段设置为零，则任务在完成后即可立即删除
  suspend: false                    #suspend 指定 Job 控制器是否应该创建 Pod。如果创建 Job 时将 suspend 设置为 true，则 Job 控制器不会创建任何 Pod。 如果 Job 在创建后被挂起（即标志从 false 变为 true），则 Job 控制器将删除与该 Job 关联的所有活动 Pod。 用户必须设计他们的工作负载来优雅地处理这个问题。暂停 Job 将重置 Job 的 startTime 字段， 也会重置 ActiveDeadlineSeconds 计时器。默认为 false
  selector:                         #对应与 Pod 计数匹配的 Pod 的标签查询。通常，系统会为你设置此字段。
    matchLabels:
      app: mysql
    matchExpressions:
    - key: app
      operator: In
      values: ["mysql"]