#  Kubernetes中的ClusterRole是一种授权机制，用于控制用户或服务账号对集群级别资源的访问权限。ClusterRole定义了一组权限，可以被绑定到一组用户或服务账号上，以限制它们在集群中的操作范围。
#    ClusterRole的使用场景包括但不限于以下几个方面：
#    1. 集群级别的授权：ClusterRole可以授权用户或服务账号对整个集群的资源进行操作，如节点、命名空间、存储卷等。
#    2. 集群级别的访问控制：ClusterRole可以限制用户或服务账号在集群中的操作范围，从而提高安全性。
#    3. 跨命名空间的授权：ClusterRole可以被绑定到多个命名空间，以授权用户或服务账号在这些命名空间中的资源进行操作。
apiVersion: rbac.authorization.k8s.io/v1    #版本号，固定值
kind: ClusterRole                           #资源类型，固定值
metadata:                                   #元数据
  name: my-cluster-role                     #名称
aggregationRule:                            #是一个可选字段，用于描述如何构建这个 ClusterRole 的 rules
#  clusterRoleSelectors:                     #包含一个选择器的列表，用于查找 ClusterRole 并创建规则。 如果发现任何选择器匹配的 ClusterRole，将添加其对应的权限。
#    matchLabels:
#      app: mysql
#    matchExpressions:
#    - key: app
#      operator: In
#      values: ["mysql","kafka"]
rules:                                      #包含了这个 ClusterRole 的所有 PolicyRule
- apiGroups: [""]                           #apiGroups 是包含资源的 apiGroup 的名称。 如果指定了多个 API 组，则允许针对任何 API 组中的其中一个枚举资源来请求任何操作。 "" 表示核心 API 组，“*” 表示所有 API 组
  resources: ["pods","services","deployments","configmaps","secrets","nodes","persistentvolumes","namespaces"]                       #resources 是此规则所适用的资源的列表。“*” 表示所有资源。
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]  #verbs 是适用于此规则中所包含的所有 ResourceKinds 的动作。 “*” 表示所有动作
  resourceNames: []                         #此规则所适用的资源名称白名单，可选。 空集合意味着允许所有资源。
  nonResourceURLs: []                       #nonResourceURLs 是用户应有权访问的一组部分 URL。 允许使用 “*”，但仅能作为路径中最后一段且必须用于完整的一段， 因为非资源 URL 没有划分命名空间。 此字段仅适用于从 ClusterRoleBinding 引用的 ClusterRole。 rules 可以应用到 API 资源（如 “pod” 或 “secret”）或非资源 URL 路径（如 “/api”）， 但不能同时应用于两者。