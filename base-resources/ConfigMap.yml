#  Kubernetes中的ConfigMap是一种配置机制，用于存储非机密数据，例如应用程序配置、环境变量、命令行参数等。ConfigMap可以被挂载到Pod中的容器中，以便容器可以访问其中的配置数据。
#    ConfigMap的使用场景包括但不限于以下几个方面：
#    1. 应用程序配置：ConfigMap可以存储应用程序的配置信息，例如数据库连接字符串、日志级别、端口号等。
#    2. 环境变量：ConfigMap可以存储环境变量，以便容器可以使用它们。
#    3. 命令行参数：ConfigMap可以存储命令行参数，以便容器可以使用它们。
#    4. 镜像配置：ConfigMap可以存储镜像拉取策略、镜像版本等信息，以便容器可以使用它们。
apiVersion: v1            #版本号，固定v1
kind: ConfigMap           #资源类型，固定ConfigMap,作用是为Pod提供配置数据，公共kv，可以存放文本、文件、二进制数据
metadata:                 #元数据
  name: mysql-cm          #名称
data:                     #文本数据
  MYSQL_ROOT_PASSWORD: "8wig5AUhdr4AY5O"                      #普通文本型kv
  MYSQL_HOST_IP: "mysql-0.mysql.opencloud.svc.cluster.local"
  MYSQL_PORT: "3306"
  run.sh: |                                                   #文本文件型kv
    #!/bin/sh
    Sleep 10 # wait for vars to set
    SET_INDEX=${HOSTNAME##*-}
    echo "Starting initializing for pod $SET_INDEX"
    if [ "$SET_INDEX" = "0" ]; then
      cp /mnt/scripts/my-0.cnf /mnt/data/my.cnf
      cp /mnt/scripts/init-mysql-0.sql /mnt/data/b-init-mysql-cluster.sql
      cp /mnt/scripts/init-test-script.sql /mnt/data/a-init-test-script.sql
      cp /mnt/scripts/prep-work.sh /mnt/data/prep-work.sh
      touch /mnt/data/auto.cnf       
    elif [ "$SET_INDEX" = "1" ]; then
      cp /mnt/scripts/my-1.cnf /mnt/data/my.cnf
      cp /mnt/scripts/init-mysql-1.sql /mnt/data/b-init-mysql-cluster.sql
      cp /mnt/scripts/init-test-script.sql /mnt/data/a-init-test-script.sql ## init.d.db files are executed in alphabatical order. non bootstrap members boot as super read only hence need to do init writes before cluster configs.      
      cp /mnt/scripts/prep-work.sh /mnt/data/prep-work.sh
      touch /mnt/data/auto.cnf
    elif [ "$SET_INDEX" = "2" ]; then
      echo "placeholder to add 3rd mysql member."
    else
      echo "Invalid statefulset index"
      exit 1
    fi

    nc -w 2 -v mysql.default.svc.cluster.local 3306 </dev/null;
    if [[ $? -ne 1 ]]
      then
        echo "####### AUTOMATED CONFIG APPEND START ###############"  >> /mnt/data/my.cnf
        echo "####### RUNNING CLUSTER DETECTED ####################"  >> /mnt/data/my.cnf
        echo "####### HENCE: OMIT BOOTSTRAP CLUSTER ###############"  >> /mnt/data/my.cnf
        echo "loose-group_replication_bootstrap_group = OFF" >> /mnt/data/my.cnf
        echo "####### AUTOMATED CONFIG APPEND END   ###############"  >> /mnt/data/my.cnf
      else
        echo "####### AUTOMATED CONFIG APPEND START ###############"  >> /mnt/data/my.cnf
        echo "####### UNABLE TO DETECT RUNNING CLUSTER ############"  >> /mnt/data/my.cnf
        echo "####### HENCE: BOOTSTRAP CLUSTER ON BOOT ############"  >> /mnt/data/my.cnf
        echo "loose-group_replication_bootstrap_group = ON" >> /mnt/data/my.cnf
        echo "####### AUTOMATED CONFIG APPEND END   ###############"  >> /mnt/data/my.cnf

        # Sleep few seconds only on first cluster boot to open 3306 port before second node starts up. otherwise second node will also bootstap cluster.
        # TODO : remove sleep and add nc lookup to check if 3306 service is up and running.
        echo "####### AUTOMATED CONFIG APPEND END   ###############"  >> /mnt/data/prep-work.sh
        echo "####### UNABLE TO DETECT RUNNING CLUSTER ############"  >> /mnt/data/prep-work.sh
        echo "####### HENCE: BOOTSTRAP CLUSTER ON BOOT ############"  >> /mnt/data/prep-work.sh
        echo "####### WAIT FOR INITIAL CLUSTER TO BOOTUP ##########"  >> /mnt/data/prep-work.sh
        echo "sleep 60"  >> /mnt/data/prep-work.sh
    fi
  my-0.cnf: |
    # For advice on how to change settings please see
    # http://dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html

    # https://www.digitalocean.com/community/tutorials/how-to-configure-mysql-group-replication-on-ubuntu-16-04#choosing-single-primary-or-multi-primary
    # https://dba.stackexchange.com/questions/287649/mysql-multi-master-group-replication-on-kubernetes

    [mysqld]

    ########################## GROUP REPLICATION CONFIG START #########################################

    # General replication settings
    gtid_mode = ON
    enforce_gtid_consistency = ON
    master_info_repository = TABLE
    relay_log_info_repository = TABLE
    binlog_checksum = NONE
    log_slave_updates = ON
    log_bin = binlog
    binlog_format = ROW
    transaction_write_set_extraction = XXHASH64
    ### group_replication_bootstrap only need when cluster boot for the first time. Hence, this is conditional.
    ### Moved this config to append based on cluster state from init container.
    #loose-group_replication_bootstrap_group = ON
    loose-group_replication_start_on_boot = ON
    #loose-group_replication_ssl_mode = REQUIRED
    #loose-group_replication_recovery_use_ssl = 1

    # Shared replication group configuration
    loose-group_replication_group_name = "85cbd4a0-7338-46f1-b15e-28c1a26f465e"
    loose-group_replication_ip_whitelist = "mysql-0.mysql.default.svc.cluster.local,mysql-1.mysql.default.svc.cluster.local"
    loose-group_replication_group_seeds = "mysql-0.mysql.default.svc.cluster.local:33061,mysql-1.mysql.default.svc.cluster.local:33061"

    # Single or Multi-primary mode? Uncomment these two lines
    # for multi-primary mode, where any host can accept writes
    loose-group_replication_single_primary_mode = OFF
    loose-group_replication_enforce_update_everywhere_checks = ON

    # Host specific replication configuration
    server_id = 1
    server-id = 1
    bind-address = "mysql-0.mysql.default.svc.cluster.local"
    report_host = "mysql-0.mysql.default.svc.cluster.local"
    loose-group_replication_local_address = "mysql-0.mysql.default.svc.cluster.local:33061"

    #########################  GROUP REPLICATION CONFIG END ###########################################
    #
    # Remove leading # and set to the amount of RAM for the most important data
    # cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.
    # innodb_buffer_pool_size = 128M
    #
    # Remove leading # to turn on a very important data integrity option: logging
    # changes to the binary log between backups.
    # log_bin
    #
    # Remove leading # to set options mainly useful for reporting servers.
    # The server defaults are faster for transactions and fast SELECTs.
    # Adjust sizes as needed, experiment to find the optimal values.
    # join_buffer_size = 128M
    # sort_buffer_size = 2M
    # read_rnd_buffer_size = 2M
    skip-host-cache
    skip-name-resolve
    datadir=/var/lib/mysql
    socket=/var/lib/mysql/mysql.sock
    secure-file-priv=/var/lib/mysql-files
    user=mysql

    # Disabling symbolic-links is recommended to prevent assorted security risks
    symbolic-links=0

    #log-error=/var/log/mysqld.log
    relay_log=mysql-0-relay-bin
    #group_replication_communication_debug_options="GCS_DEBUG_ALL"
    pid-file=/var/run/mysqld/mysqld.pid
  my-1.cnf: |
    # For advice on how to change settings please see
    # http://dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html

    # https://www.digitalocean.com/community/tutorials/how-to-configure-mysql-group-replication-on-ubuntu-16-04#choosing-single-primary-or-multi-primary
    # https://dba.stackexchange.com/questions/287649/mysql-multi-master-group-replication-on-kubernetes

    [mysqld]

    ########################## GROUP REPLICATION CONFIG START #########################################

    # General replication settings
    gtid_mode = ON
    enforce_gtid_consistency = ON
    master_info_repository = TABLE
    relay_log_info_repository = TABLE
    binlog_checksum = NONE
    log_slave_updates = ON
    log_bin = binlog
    binlog_format = ROW
    transaction_write_set_extraction = XXHASH64
    ### group_replication_bootstrap only need when cluster boot for the first time. Hence, this is conditional.
    ### Moved this config to append based on cluster state from init container.    
    #loose-group_replication_bootstrap_group = OFF
    loose-group_replication_start_on_boot = ON
    #loose-group_replication_ssl_mode = REQUIRED
    #loose-group_replication_recovery_use_ssl = 1

    # Shared replication group configuration
    loose-group_replication_group_name = "85cbd4a0-7338-46f1-b15e-28c1a26f465e"
    loose-group_replication_ip_whitelist = "mysql-0.mysql.default.svc.cluster.local,mysql-1.mysql.default.svc.cluster.local"
    loose-group_replication_group_seeds = "mysql-0.mysql.default.svc.cluster.local:33061,mysql-1.mysql.default.svc.cluster.local:33061"

    # Single or Multi-primary mode? Uncomment these two lines
    # for multi-primary mode, where any host can accept writes
    loose-group_replication_single_primary_mode = OFF
    loose-group_replication_enforce_update_everywhere_checks = ON

    # Host specific replication configuration
    server_id = 2
    server-id = 2
    bind-address = "mysql-1.mysql.default.svc.cluster.local"
    report_host = "mysql-1.mysql.default.svc.cluster.local"
    loose-group_replication_local_address = "mysql-1.mysql.default.svc.cluster.local:33061"

    #########################  GROUP REPLICATION CONFIG END ###########################################
    #
    # Remove leading # and set to the amount of RAM for the most important data
    # cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.
    # innodb_buffer_pool_size = 128M
    #
    # Remove leading # to turn on a very important data integrity option: logging
    # changes to the binary log between backups.
    # log_bin
    #
    # Remove leading # to set options mainly useful for reporting servers.
    # The server defaults are faster for transactions and fast SELECTs.
    # Adjust sizes as needed, experiment to find the optimal values.
    # join_buffer_size = 128M
    # sort_buffer_size = 2M
    # read_rnd_buffer_size = 2M
    skip-host-cache
    skip-name-resolve
    datadir=/var/lib/mysql
    socket=/var/lib/mysql/mysql.sock
    secure-file-priv=/var/lib/mysql-files
    user=mysql

    # Disabling symbolic-links is recommended to prevent assorted security risks
    symbolic-links=0

    #log-error=/var/log/mysqld.log
    relay_log=mysql-1-relay-bin
    #group_replication_communication_debug_options="GCS_DEBUG_ALL"    
    pid-file=/var/run/mysqld/mysqld.pid
