apiVersion: apps/v1         #版本号，固定
kind: StatefulSet            #资源类型，这里固定是StatefulSet，是指有状态部署集合
metadata:                   #元数据
  name: mysql-ms            #StatefulSet名称，全局唯一
  namespace: opencloud        #Deployment命名空间，不填默认为default空间
  labels:                     #自定义标签
    db: mysql
  annotations:                #自定义非结构化键值映射
    version: v5.7
spec:                                 #定义 StatefulSet 预期行为的规约,也就是规格定义
  serviceName: mysql-opencloud-svc    #绑定的服务名称,该服务必须在 StatefulSet 之前即已存在，并负责该集合的网络标识。 Pod 会获得符合以下模式的 DNS/主机名： pod-specific-string.serviceName.default.svc.cluster.local。 其中 “pod-specific-string” 由 StatefulSet 控制器管理。
  replicas: 2                         #预期 Pod 的数量
  selector:                           #供Pod所用的标签选择器
    # matchExpressions:                 #按表达式匹配
    # - key: app                        #匹配的标签键
    #   operator: In                    #匹配运算符 In/NotIn/Exists/DoesNotExist
    #   values: ["opencloud-ecs-core"]  #匹配值数组
    matchLabels:                      #标签匹配
      db: mysql                       #匹配的kv
  minReadySeconds: 1                  #Pod创建成功之后最少初始化时间，对于Java程序来说这个时间可能会比较久
  revisionHistoryLimit: 3             #保留滚动更新旧版本数量
  updateStrategy:                           #更新策略
    type: RollingUpdate               #策略类型： Recreate或 RollingUpdate,默认为RollingUpdate
    rollingUpdate:                    #滚动更新策略
      partition: 0                     #表示 StatefulSet 应该被分区进行更新时的序数。 在滚动更新期间，序数在 replicas-1 和 partition 之间的所有 Pod 都会被更新。 序数在 partition-1 和 0 之间的所有 Pod 保持不变，默认为0
      maxUnavailable: 5               #更新期间可能不可用的最大 Pod 数量。该值可以是一个绝对数（例如： 5）或一个预期 Pod 的百分比（例如：10%）。通过向下取整计算得出一个百分比绝对数。 如果 MaxSurge 为 0，则此字段不能为 0。默认为 25%。 例如：当此字段设为 30%，则在滚动更新启动时 ReplicaSet 可以立即缩容为预期 Pod 数量的 70%。 一旦新的 Pod 就绪，ReplicaSet 可以再次缩容，接下来对新的 ReplicaSet 扩容， 确保更新期间任何时间可用的 Pod 总数至少是预期 Pod 数量的 70%
  podManagementPolicy: OrderedReady   #控制在初始规模扩展期间、替换节点上的 Pod 或缩减集合规模时如何创建 Pod。 默认策略是 “OrderedReady”，各个 Pod 按升序创建的（pod-0，然后是pod-1 等）， 控制器将等到每个 Pod 都准备就绪后再继续。缩小集合规模时，Pod 会以相反的顺序移除。 另一种策略是 “Parallel”，意味着并行创建 Pod 以达到预期的规模而无需等待，并且在缩小规模时将立即删除所有 Pod
  volumeClaimTemplates:               #允许 Pod 引用的申领模板清单。 StatefulSet controller 负责以维持 Pod 身份不变的方式将网络身份映射到申领之上。 此列表中的每个申领至少必须在模板的某个容器中存在匹配的（按 name 匹配）volumeMount。 此列表中的申领优先于模板中具有相同名称的所有卷
    - apiVersion: v1                  #固定值
      kind: PersistentVolumeClaim     #持久卷申请
      metadata:                       #持久卷元数据
        name: mysql-pvc               #持久卷名称
        namespace: opencloud          #命名空间
        labels:                       #自定义标签
          db: mysql
      spec:
        accessModes:                  #指定PVC的访问模式，例如ReadWriteOnce、ReadOnlyMany或ReadWriteMany
          - ReadWriteMany
        resources:                    #资源定义
          requests:                   #最小资源
            storage: 1Gi
          limits:                     #资源上限
            storage: 5Gi
        storageClassName: standard    #指定PVC使用的存储类名称
        volumeMode: Filesystem        #指定PVC的卷模式，例如Filesystem或Block
        selector:                     #指定PVC选择器，用于选择符合条件的持久卷
          matchLabels:
            name: nfs-pv
        volumeName: my-volume         #指定PVC使用的持久卷名称
        dataSourceRef:                   #指定PVC使用的数据源，例如Secret或ConfigMap
          kind: Secret
          name: my-secret
          apiGroup: v1
  template:                           #Pod模板定义
    metadata:                         #模板元数据
      labels:                         #模板自定义标签
        app: opencloud-ecs-core
    spec:                                                       #Pod模板规格
      # initContainers:                                           #属于Pod的init容器列表
      # ephemeralContainers:                                      #在此Pod中运行的临时容器列表
      # imagePullSecrets:                                         #私有镜像仓库拉取的Secret
      # - name: docker-registry-secret
      containers:                                                 #Pod中的容器清单
      - name: opencloud-ecs-core                                  #容器名称
        imagePullPolicy: IfNotPresent                             #镜像拉取策略。"Always"、"Never"、"IfNotPresent" 之一。如果指定了 :latest 标签，则默认为 "Always"， 否则默认为 "IfNotPresent"。无法更新
        image: dev.gamecdn.com:5000/opencloud-ecs-core:v0.0.1     #镜像名称、仓库、版本
        # command: ["opencloud-ecs-core","-f", "opencloud-ecs-core.yml"]  #执行容器内的命令，如果未提供，则使用容器镜像的ENDPOINT.变量引用 $(VAR_NAME) 使用容器的环境进行扩展
        # args: []                                                  #endpoint执行参数，如果未提供，则使用容器镜像的 CMD 设置
        # workingDir: /apps                                         #容器的工作目录。如果未指定，将使用容器运行时的默认值，默认值可能在容器镜像中配置
        ports:                                                    #容器端口映射清单
          - containerPort: 8555                                   #要在 Pod 的 IP 地址上公开的端口号
            # hostIP:                                               #绑定外部端口的主机 IP
            # hostPort:                                             #要在主机上公开的端口号
            # name:                                                 #如果设置此字段，这必须是 IANA_SVC_NAME 并且在 Pod 中唯一。 Pod 中的每个命名端口都必须具有唯一的名称。服务可以引用的端口的名称。
            protocol: TCP                                         #端口协议。必须是 UDP、TCP 或 SCTP。默认为 TCP。
        # env:                                                      #环境参数定义
        # - name: ENV_VAR1_NAME                                     #环境变量名
        #   value: test_value                                       #环境变量值
        # - name: ENV_VAR2_NAME
        #   valueFrom:                                              #从ConfigMap或元数据labels获取值
        #     configMapKeyRef:                                      #从ConfigMap引用
        #       name: test_cm                                       #被引用的comfigMap的名称
        #       key: ssl                                            #configMap中的key
        # - name: ENV_VAR3_NAME
        #   valueFrom:
        #     fieldRef: metadata.labels['app']                      #选择 Pod 的一个字段：支持 metadata.name、metadata.namespace、metadata.labels['<KEY>']、 metadata.annotations['<KEY>']、spec.nodeName、spec.serviceAccountName、status.hostIP status.podIP、status.podIPs
        #     resourceFieldRef: limit.cpu                           #选择容器的资源：目前仅支持资源限制和请求（limits.cpu、limits.memory、limits.ephemeral-storage、 requests.cpu、requests.memory 和 requests.ephemeral-storage）
        #     secretKeyRef:                                         #在 Pod 的名字空间中选择 Secret 的主键
        #       name: test-secret                                   #被引用的secret名称
        #       key: test-key                                       #要选择的Secret的key
        # envFrom:                                                  #用来在容器中填充环境变量的数据源列表
        # - configMapRef:                                           #从configMap导入
        #   name: env-configmap                                     #要导入的环境变量ConfigMap名称
        # prefix: MYSQL_                                            #导入key的前缀
        # secretRef:                                                #从指定的secret导入
        #   name: env-secret                                        #要导入的secret名称
        volumeMounts:                                               #要挂载到容器文件系统中的 Pod 卷
        - name: logs                                                #挂载点名称，必须与volumes中名称匹配
          mountPath: /opt/logs                                      #挂载到容器内的路径
          # readOnly: false                                           #是否只读模式，默认为false，即为读写模式
        # volumeDevices:                                              #是容器要使用的块设备列表
        # - name: "pvc-1"                                             #name 必须与 Pod 中的 persistentVolumeClaim 的名称匹配
        #   devicePath: /data                                         #设备将被映射到的容器内的路径
        # resources:                                                  #资源限额配置
        #   requests:                                                 #最小需求
        #     cpu:  100m                                              #CPU资源，10%core
        #     memory: 256Mi                                           #最小内存需求
        #   limits:                                                   #最大限额
        #     cpu: 500m                                               #cpu最大允许使用0.5core
        #     memory: 1Gi                                             #内存最大允许1G
      #   lifecycle:                                                  #管理系统应对容器生命周期事件采取的行动
      #     postStart:                                                #创建容器后立即调用 postStart。如果处理程序失败，则容器将根据其重新启动策略终止并重新启动。 容器的其他管理阻塞直到钩子完成
      #       exec:                                                   #在容器内执行的命令行
      #         command: []                                           #要在容器内执行的命令行，命令的工作目录是容器文件系统中的根目录（'/'）。 该命令只是被通过 exec 执行，而不会单独启动一个 Shell 来运行，因此传统的 Shell 指令（'|' 等）将不起作用。要使用某 Shell，你需要显式调用该 Shell。 退出状态 0 被视为活动/健康，非零表示不健康
      #       httpGet:                                                #执行http接口调用
      #         port: 8555                                            #容器内http端口号
      #         host:                                                 #http的host主机名
      #         httpHeaders:                                          #自定义http头列表
      #         - name: Request-Id                                    #自定义http头的key
      #           value: 2873wbjkebfd2i                               #自定义http头的值
      #         path: /init                                           #URI路径
      #         scheme: HTTP                                          #http或https
      #     preStop:                                                  #在容器因 API 请求或管理事件（如存活态探针/启动探针失败、抢占、资源争用等）而终止之前立即调用。 如果容器崩溃或退出，则不会调用处理程序
      #       exec:                                                   #在容器内执行的命令行
      #         command: []                                           #要在容器内执行的命令行，命令的工作目录是容器文件系统中的根目录（'/'）。 该命令只是被通过 exec 执行，而不会单独启动一个 Shell 来运行，因此传统的 Shell 指令（'|' 等）将不起作用。要使用某 Shell，你需要显式调用该 Shell。 退出状态 0 被视为活动/健康，非零表示不健康
      #       httpGet:                                                #执行http接口调用
      #         port: 8555                                            #容器内http端口号
      #         host:                                                 #http的host主机名
      #         httpHeaders:                                          #自定义http头列表
      #         - name: Request-Id                                    #自定义http头的key
      #           value: 2873wbjkebfd2i                               #自定义http头的值
      #         path: /close                                           #URI路径
      #         scheme: HTTP                                          #http或https
      #     livenessProbe:                                            #定期探针容器活跃度。如果探针失败，容器将重新启动
      #       exec:                                                   #在容器内执行的命令行
      #         command: []                                           #要在容器内执行的命令行，命令的工作目录是容器文件系统中的根目录（'/'）。 该命令只是被通过 exec 执行，而不会单独启动一个 Shell 来运行，因此传统的 Shell 指令（'|' 等）将不起作用。要使用某 Shell，你需要显式调用该 Shell。 退出状态 0 被视为活动/健康，非零表示不健康
      #       httpGet:                                                #执行http接口调用
      #         port: 8555                                            #容器内http端口号
      #         host:                                                 #http的host主机名
      #         httpHeaders:                                          #自定义http头列表
      #         - name: Request-Id                                    #自定义http头的key
      #           value: 2873wbjkebfd2i                               #自定义http头的值
      #         path: /init                                           #URI路径
      #         scheme: HTTP                                          #http或https
      #       initialDelaySeconds: 10                                 #初始化延时秒数
      #       periodSeconds: 5                                        #探针时间间隔
      #       timeoutSeconds: 1                                       #超时时间
      #       failureThreshold: 2                                     #失败次数，1-3次
      #       successThreshold: 1                                     #最少成功次数
      #     readinessProbe:                                           #定期探测容器服务就绪情况。如果探针失败，容器将被从服务端点中删除
      #     # 同livenessProbe
      #     startupProbe:                                             #startupProbe 表示 Pod 已成功初始化。如果设置了此字段，则此探针成功完成之前不会执行其他探针
      #     # 同livenessProbe
      volumes:                                                        #卷来源描述
      - name: logs                                                    #卷名称
        hostPath:                                                     #节点本地主机路径
          path: /opt/k8s/shared/opencloud/logs                        #节点本地路径
      - name: data
        persistentVolumeClaim:                                        #挂载PVC卷到容器
          claimName: mysql-pvc                                          #pvc名称
          readOnly: false                                             #是否只读
      - name: cfg
        configMap:                                                    #预定义的configMap
          name: cfg-vol-cm                                            #configMap名称
          items:                                                      #允许投射的文件名key
            - key: mysql.cnf                                          #键
              path: etc/                                              #将键映射到的文件的相对路径。不能是绝对路径。不能包含路径元素 “..”。不能以字符串 “..” 开头
      - name: sec
        secret:                                                       #使用secret映射卷
          secretName: vol-secret                                      #要使用的、位于 Pod 的名字空间中的 Secret 名称
          items:                                                      #允许投射的文件名key
            - key: mysql.cnf                                          #键
              path: etc/                                              #将键映射到的文件的相对路径。不能是绝对路径。不能包含路径元素 “..”。不能以字符串 “..” 开头
